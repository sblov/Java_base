JAVA的事件委托机制和垃圾回收机制
	java 事件委托机制的概念,一个源产生一个事件并将它送到一个或多个监听器
	那里。在这种方案中，监听器简单的等待，直到它收到一个事件。一旦事件被
	接受，监听器将处理这个事件，然后返回。
	垃圾回收机制 垃圾收集是将分配给对象但不再使用的内存回收或释放的过程。
	如果一个对象没有指向它的引用或者其赋值为null,则次对象适合进行垃圾回
	收
序列化:
	处理对象流的机制，所谓对象流也就是将对象的内容进行流化。可以对流化
	后的对象进行读写操作，也可将流化后的对象传输于网络之间。序列化是为了
	解决在对对象流进行读写操作时所引发的问题。
序列化的实现：
	将需要被序列化的类实现Serializable接口，该接口没有需要实现的方法，
	implements Serializable只是为了标注该对象是可被序列化的，然后使用一个
	输出流(如：FileOutputStream)来构造一个ObjectOutputStream(对象流)对象，
	接着，使用ObjectOutputStream 对象的writeObject(Object obj)方法就可以
	将参数为obj的对象写出(即保存其状态)，要恢复的话则用输入流。
Final
	属性常量
	方法不可以 overridding
	类不可以继承
接口与抽象类
	(1)接口可以被多重implements,抽象类只能被单一extends
	(2)接口只有定义,抽象类可以有定义和实现
	(3)接口的字段定义默认为:public static final, 抽象类字段默认是
	"friendly"（default）(本包可见)
	当功能需要累积时用抽象类，不需要累积时用接口。
唤起类中的一个方法？
	产生一个Class数组，说明方法的参数
	通过Class对象及方法参数得到Method
	通过method.invoke(实例,参数值数组)唤醒方法
格式化日期
	Import java.text. SimpleDateFormat;
	SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
	Date dat=new Date();
	//把日期转化为字符串
	String str=sdf.format(dat);
	System.out.println(str);
	//将字符串转化为日期
	Java.util.Date d1=sdf.parse(“yyyy-mm-dd”);
最简单内存泄漏
	int i,i2; return (i-i2); //when i 为足够大的正数,i2 为足够
	大的负数。结果会造成溢位，导致错误。
ArrayList Vector:以数组的方式存储，增、删慢，查、改快
ArrayList:线程不安全，速度快
Vector:线程安全，速度慢(synchoronized)
LikedList: 以单链表的方式存储，增、删快，查、改慢
HashMap与Hashtable都实现的Map接口,HashTable线程安全，HashMap线程不
安全。

在比较时先调用hashCode方法，如果不相同，证明不相等。
如果相同，再调用equals方法，如果equals方法相同，证明相等，不相同，证明不相等。
==:主要用在基本数据类型及引用
Equals:主要是对象或对象引用的比较。
集合中是否包含某一个元素用contains来判断。

final 用于声明属性，方法和类，分别表示属性不可变，方法不可覆盖，类
不可继承。
finally是异常处理语句结构的一部分，表示总是执行。
finalize是Object类的一个方法，在垃圾收集器执行的时候会调用被回收
对象的此方法，可以覆盖此方法提供垃圾收集时的其他资源回收，例如关闭文
件等。

栈是一种线形集合，其添加和删除元素的操作应在同一段完成。栈按照后进先
出的方式进行处理。
堆是栈的一个组成元素

用最有效率的方法算出2乘以8等於几?
2 << 3

同步的实现方面有两种，分别是synchronized,wait与notify
反对使用stop()，是因为它不安全。它会解除由线程获取的所有锁定，而且如
果对象处于一种不连贯状态，那么其他线程能在那种状态下检查和修改它们。
结果很难检查出真正的问题所在。suspend()方法容易发生死锁。调用suspend()
的时候，目标线程会停下来，但却仍然持有在这之前获得的锁定。此时，其他
任何线程都不能访问锁定的资源，除非被"挂起"的线程恢复运行。对任何线程
来说，如果它们想恢复目标线程，同时又试图使用任何一个锁定的资源，就会
造成死锁。所以不应该使用suspend()，而应在自己的Thread 类中置入一个标
志，指出线程应该活动还是挂起。若标志指出线程应该挂起，便用wait()命其
进入等待状态。若标志指出线程应当恢复，则用一个notify()重新启动线程。